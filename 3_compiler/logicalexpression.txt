std::string label = _context.currentLabel;
if(this->getOperator() == "&&"){
  //_context.opUsedInIf.first = "&&";
  // essentially just carries out what is in the brackets that number of times
  // leave the if statement or the loop to deal with the labelling and the nops
  // both branch commands are dependent opposite to what is in the sub expression

  //if(this->getLeft()){
  std::cout << _context.opUsedInIf.first << std::endl;
  /*if(this->getLeft() == NULL){
    std::cout << "NULL!" << std::endl;
  }
  else{
    std::cout << "NOT NULL!" << std::endl;
  }*/
  //std::string name = this->getLeft()->ReturnName();
  this->getLeft()->codegen(_context);
  //std::cout << "LEFT NAME--> " << name << std::endl;
  std::cout << _context.opUsedInIf.first << std::endl;

  if(_context.opUsedInIf.first == "=="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");
    std::string regUsedSecond = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << regUsedSecond << "," << label << std::endl;

    _context.pushRegister(regUsedSecond, "rv");
    _context.pushRegister(regUsedFirst, "rv");

  }
  if(_context.opUsedInIf.first == "!="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");
    std::string regUsedSecond = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << regUsedSecond << "," << label << std::endl;

    _context.pushRegister(regUsedSecond, "rv");
    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == "<"){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == ">"){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == "<="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == ">="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }

  this->getRight()->codegen(_context);

  if(_context.opUsedInIf.first == "=="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");
    std::string regUsedSecond = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << regUsedSecond << "," << label << std::endl;

    _context.pushRegister(regUsedSecond, "rv");
    _context.pushRegister(regUsedFirst, "rv");

  }
  if(_context.opUsedInIf.first == "!="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");
    std::string regUsedSecond = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << regUsedSecond << "," << label << std::endl;

    _context.pushRegister(regUsedSecond, "rv");
    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == "<"){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == ">"){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == "<="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == ">="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
}

else if(this->getOperator() == "||"){
  // both branch commands are opposite to what corresponds to the sub expression
  _context.opUsedInIf.first = "||";


  this->getLeft()->codegen(_context);
  if(_context.opUsedInIf.first == "=="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");
    std::string regUsedSecond = _context.popRegister("rv");



    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << regUsedSecond << "," << label << std::endl;

    _context.pushRegister(regUsedSecond, "rv");
    _context.pushRegister(regUsedFirst, "rv");

  }
  if(_context.opUsedInIf.first == "!="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");
    std::string regUsedSecond = _context.popRegister("rv");



    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << regUsedSecond << "," << label << std::endl;

    _context.pushRegister(regUsedSecond, "rv");
    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == "<"){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");



    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == ">"){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    //
    //;

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == "<="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label
    ;

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == ">="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }

  this->getRight()->codegen(_context);

  if(_context.opUsedInIf.first == "=="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");
    std::string regUsedSecond = _context.popRegister("rv");

    // make label
    //:;

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << regUsedSecond << "," << label << std::endl;

    _context.pushRegister(regUsedSecond, "rv");
    _context.pushRegister(regUsedFirst, "rv");

  }
  if(_context.opUsedInIf.first == "!="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");
    std::string regUsedSecond = _context.popRegister("rv");

    // make label

    ;

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << regUsedSecond << "," << label << std::endl;

    _context.pushRegister(regUsedSecond, "rv");
    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == "<"){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label
    //;

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == ">"){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label
    //:;

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == "<="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label
    //:;

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "beq " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }
  else if(_context.opUsedInIf.first == ">="){
    std::string compValueOrReg = _context.valueForSelection.first;
    std::string regUsedFirst = _context.popRegister("rv");

    // make label
    //;

    std::cout << std::setw(5) << std::left << "" << std::setw(10) << std::left << "bne " << std::setw(4) << std::right << regUsedFirst << "," << "$0" << "," << label << std::endl;

    _context.pushRegister(regUsedFirst, "rv");

  }

}
