%type <stmt> labeled_statement compound_statement expression_statement
%type <stmt> selection_statement iteration_statement jump_statement
%type <stmt> statement_list
%type <stmt> statement
%type <dltr> declarator direct_declarator
%type <dltr> init_declarator init_declarator_list
%type <dltr> declaration declaration_list declaration_specifiers

%type <fndf> function_definition
%type <exdf> external_declaration
%type <unit> translation_unit

%type <expr> primary_expression postfix_expression unary_expression
%type <expr> multiplicative_expression additive_expression shift_expression
%type <expr> relational_expression equality_expression
%type <expr> and_expression eor_expression or_expression
%type <expr> logical_and_expression logical_or_expression
%type <expr> conditional_expression assignment_expression
%type <expr> constant_expression
%type <expr> expression
%type <expr> type_specifier identifier_list

%type <stmt> labeled_statement compound_statement expression_statement
%type <stmt> selection_statement iteration_statement jump_statement
%type <stmt> statement_list
%type <stmt> statement

%type <string_value> IDENTIFIER CONSTANT STRING_LITERAL INC_OP DEC_OP
%type <string_value> LEFT_OP RIGHT_OP
%type <string_value> MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%type <string_value> SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%type <string_value> OR_ASSIGN XOR_ASSIGN assignment_operator '='
%type <string_value> VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED
%type <unit> this_unit


declaration
  : declaration_specifiers ';'                      { $$ = new MainDeclaration( $1, NULL); }
  | declaration_specifiers init_declarator_list ';' { $$ = new MainDeclaration( $1, $2 ); }
  ;

declaration_specifiers
  : type_specifier                        { $$ = new DeclarationSpecifier( $1, NULL ); }
  | type_specifier declaration_specifiers { $$ = new DeclarationSpecifier( $1, NULL ); }
  ;

init_declarator_list
  : init_declarator                       { $$ = new InitDeclaratorList(); $$->declaration_list->push_back( $1 ); }
  | init_declarator ',' init_declarator   { $1->declaration_list->push_back( $3 ); }
  ;

init_declarator
  : declarator                            { $$ = new InitDeclarator( $1, NULL ); }
  ;


type_specifier
  : VOID                      { $$ = new TypeSpecifierExpression( *$1 ); }
  | CHAR                      { $$ = new TypeSpecifierExpression( *$1 ); }
  | SHORT                     { $$ = new TypeSpecifierExpression( *$1 ); }
  | INT                       { $$ = new TypeSpecifierExpression( *$1 ); }
  | LONG                      { $$ = new TypeSpecifierExpression( *$1 ); }
  | FLOAT                     { $$ = new TypeSpecifierExpression( *$1 ); }
  | DOUBLE                    { $$ = new TypeSpecifierExpression( *$1 ); }
  | SIGNED                    { $$ = new TypeSpecifierExpression( *$1 ); }
  | UNSIGNED                  { $$ = new TypeSpecifierExpression( *$1 ); }
  ;

identifier_list
  : IDENTIFIER                      { $$ = new IdentifierList(); $$->expression_list->push_back( $1 ); }
  | identifier_list ',' IDENTIFIER  { $1->expression_list->push_back( $3 ); }
  ;

declarator
  : direct_declarator
  ;

direct_declarator
  : '(' declarator ')'                            { $$ = new BracketedDeclarator( $2 ); }
  | direct_declarator '[' constant_expression ']' { $$ = new ExpressionDeclarator( $1, $3 ); }
  | direct_declarator '[' ']'                     { $$ = new ExpressionDeclarator( $1, NULL );}
  | direct_declarator '(' identifier_list ')'     { $$ = new IdentifierList( $1, $3 ); }
  | direct_declarator '(' ')'                     { $$ = new ParameterTypeDeclarator( $1, NULL );}
  ;


statement
  : labeled_statement
  | compound_statement
  | expression_statement
  | selection_statement
  | iteration_statement
  | jump_statement
  ;

labeled_statement
  : IDENTIFIER ':' statement                { $$ = new IdentifierStatement( $1, $3 ); }
  | CASE constant_expression ':' statement  { $$ = new CaseStatement( $2, $4 ); }
  | DEFAULT ':' statement                   { $$ = new DefaultStatement( $3 ); }
  ;

compound_statement
  : '{' '}'                                   { $$ = new CompoundStatement( NULL, NULL ); }
  | '{' statement_list '}'                    { $$ = new CompoundStatement( $2, NULL ); }
  | '{' declaration_list '}'                  { $$ = new CompoundStatement( NULL, $2 ); }
  | '{' declaration_list statement_list '}'   { $$ = new CompoundStatement( $2, $3 ); }
  ;

declaration_list
  : declaration                   { $$ = new DeclarationList(); $$->declaration_list->push_back( $1 );}
  | declaration_list declaration  { $1->declaration_list->push_back( $2 ); }
  ;

statement_list
  : statement                 { $$ = new StatementList(); $$->statement_list->push_back( $1 );}
  | statement_list statement  { $1->statement_list->push_back( $2 ); }
  ;

expression_statement
  : ';'                 { $$ = new ExpressionStatement( NULL ); }
  | expression ';'      { $$ = new ExpressionStatement( $1 ); }
  ;

selection_statement
  : IF '(' expression ')' statement                 { $$ = new IfSelection( $3, $5 ); }
  | IF '(' expression ')' statement ELSE statement  { $$ = new IfElseSelection( $3, $5, $7 ); }
  | SWITCH '(' expression ')' statement             { $$ = new SwitchSelection( $3, $5 ); }
  ;

iteration_statement
  : WHILE '(' expression ')' statement                                          { $$ = new WhileIterations( $3, $5 ); }
  | DO statement WHILE '(' expression ')' ';'                                   { $$ = new DoWhileIteration( $2, $5 ); }
  | FOR '(' expression_statement expression_statement ')' statement             { $$ = new ForNoExprIteration( $3, $4, $6 ); }
  | FOR '(' expression_statement expression_statement expression ')' statement  { $$ = new ForExprIteration( $3, $5, $5, $7); }
  ;

jump_statement
  : GOTO IDENTIFIER         { $$ = new GotoStatement( $2 ); }
  | CONTINUE ';'            { $$ = new ContinueStatement( new StringLiteral("") ); }
  | BREAK ';'               { $$ = new BreakStatement( new StringLiteral("") ); }
  | RETURN ';'              { $$ = new ReturnStatement( new StringLiteral("") ); }
  | RETURN expression ';'   { $$ = new ReturnExprStatement( $2 ); }
  ;



external_declaration
  : function_definition { $$ = new ExternalDeclaration( $1, NULL ); }
  | declaration         { $$ = new ExternalDeclaration( NULL, $1 ); }
  ;

function_definition
  : declaration_specifiers declarator declaration_list compound_statement { $$ = new FunctionDefinition( $1, $2, $3, $4 ); }
  | declaration_specifiers declarator compound_statement                  { $$ = new FunctionDefinition( $1, $2, NULL, $3 ); }
  | declarator declaration_list compound_statement                        { $$ = new FunctionDefinition( NULL, $1, $2, $3 ); }
  | declarator compound_statement                                         { $$ = new FunctionDefinition( NULL, $1, NULL, $2 ); }
  ;
