Nonterminals useless in grammar

   unary_operator


Terminals unused in grammar

   SIZEOF
   MUL_ASSIGN
   DIV_ASSIGN
   MOD_ASSIGN
   ADD_ASSIGN
   SUB_ASSIGN
   LEFT_ASSIGN
   RIGHT_ASSIGN
   AND_ASSIGN
   XOR_ASSIGN
   OR_ASSIGN
   TYPEDEF
   EXTERN
   STATIC
   AUTO
   REGISTER
   CHAR
   SHORT
   INT
   LONG
   SIGNED
   UNSIGNED
   FLOAT
   DOUBLE
   CONST
   VOLATILE
   VOID
   STRUCT
   UNION
   ENUM
   ELLIPSIS
   CASE
   DEFAULT
   IF
   ELSE
   SWITCH
   WHILE
   DO
   FOR
   GOTO
   CONTINUE
   BREAK
   RETURN
   '~'
   '!'


Rules useless in grammar

   42 unary_operator: '&'
   43               | '*'
   44               | '+'
   45               | '-'
   46               | '~'
   47               | '!'


Grammar

    0 $accept: ROOT $end

    1 ROOT: logical_or_expression

    2 primary_expression: IDENTIFIER
    3                   | CONSTANT
    4                   | STRING_LITERAL

    5 postfix_expression: primary_expression
    6                   | postfix_expression '(' ')'
    7                   | postfix_expression '.' IDENTIFIER
    8                   | postfix_expression PTR_OP IDENTIFIER
    9                   | postfix_expression INC_OP
   10                   | postfix_expression DEC_OP

   11 unary_expression: postfix_expression
   12                 | INC_OP unary_expression
   13                 | DEC_OP unary_expression

   14 multiplicative_expression: unary_expression
   15                          | multiplicative_expression '*' unary_expression
   16                          | multiplicative_expression '/' unary_expression
   17                          | multiplicative_expression '%' unary_expression

   18 additive_expression: multiplicative_expression
   19                    | additive_expression '+' multiplicative_expression
   20                    | additive_expression '-' multiplicative_expression

   21 shift_expression: additive_expression
   22                 | shift_expression LEFT_OP additive_expression
   23                 | shift_expression RIGHT_OP additive_expression

   24 relational_expression: shift_expression
   25                      | relational_expression '<' shift_expression
   26                      | relational_expression '>' shift_expression
   27                      | relational_expression LE_OP shift_expression
   28                      | relational_expression GE_OP shift_expression

   29 equality_expression: relational_expression
   30                    | equality_expression EQ_OP relational_expression
   31                    | equality_expression NE_OP relational_expression

   32 and_expression: equality_expression
   33               | and_expression '&' equality_expression

   34 eor_expression: and_expression
   35               | eor_expression '^' and_expression

   36 or_expression: eor_expression
   37              | or_expression '|' eor_expression

   38 logical_and_expression: or_expression
   39                       | logical_and_expression AND_OP or_expression

   40 logical_or_expression: logical_and_expression
   41                      | logical_or_expression OR_OP logical_and_expression


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'%' (37) 17
'&' (38) 33
'(' (40) 6
')' (41) 6
'*' (42) 15
'+' (43) 19
'-' (45) 20
'.' (46) 7
'/' (47) 16
'<' (60) 25
'>' (62) 26
'^' (94) 35
'|' (124) 37
'~' (126)
error (256)
IDENTIFIER (258) 2 7 8
CONSTANT (259) 3
STRING_LITERAL (260) 4
SIZEOF (261)
PTR_OP (262) 8
INC_OP (263) 9 12
DEC_OP (264) 10 13
LEFT_OP (265) 22
RIGHT_OP (266) 23
LE_OP (267) 27
GE_OP (268) 28
EQ_OP (269) 30
NE_OP (270) 31
AND_OP (271) 39
OR_OP (272) 41
MUL_ASSIGN (273)
DIV_ASSIGN (274)
MOD_ASSIGN (275)
ADD_ASSIGN (276)
SUB_ASSIGN (277)
LEFT_ASSIGN (278)
RIGHT_ASSIGN (279)
AND_ASSIGN (280)
XOR_ASSIGN (281)
OR_ASSIGN (282)
TYPEDEF (283)
EXTERN (284)
STATIC (285)
AUTO (286)
REGISTER (287)
CHAR (288)
SHORT (289)
INT (290)
LONG (291)
SIGNED (292)
UNSIGNED (293)
FLOAT (294)
DOUBLE (295)
CONST (296)
VOLATILE (297)
VOID (298)
STRUCT (299)
UNION (300)
ENUM (301)
ELLIPSIS (302)
CASE (303)
DEFAULT (304)
IF (305)
ELSE (306)
SWITCH (307)
WHILE (308)
DO (309)
FOR (310)
GOTO (311)
CONTINUE (312)
BREAK (313)
RETURN (314)


Nonterminals, with rules where they appear

$accept (75)
    on left: 0
ROOT (76)
    on left: 1, on right: 0
primary_expression (77)
    on left: 2 3 4, on right: 5
postfix_expression (78)
    on left: 5 6 7 8 9 10, on right: 6 7 8 9 10 11
unary_expression (79)
    on left: 11 12 13, on right: 12 13 14 15 16 17
multiplicative_expression (80)
    on left: 14 15 16 17, on right: 15 16 17 18 19 20
additive_expression (81)
    on left: 18 19 20, on right: 19 20 21 22 23
shift_expression (82)
    on left: 21 22 23, on right: 22 23 24 25 26 27 28
relational_expression (83)
    on left: 24 25 26 27 28, on right: 25 26 27 28 29 30 31
equality_expression (84)
    on left: 29 30 31, on right: 30 31 32 33
and_expression (85)
    on left: 32 33, on right: 33 34 35
eor_expression (86)
    on left: 34 35, on right: 35 36 37
or_expression (87)
    on left: 36 37, on right: 37 38 39
logical_and_expression (88)
    on left: 38 39, on right: 39 40 41
logical_or_expression (89)
    on left: 40 41, on right: 1 41


State 0

    0 $accept: . ROOT $end

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    ROOT                       go to state 6
    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 12
    relational_expression      go to state 13
    equality_expression        go to state 14
    and_expression             go to state 15
    eor_expression             go to state 16
    or_expression              go to state 17
    logical_and_expression     go to state 18
    logical_or_expression      go to state 19


State 1

    2 primary_expression: IDENTIFIER .

    $default  reduce using rule 2 (primary_expression)


State 2

    3 primary_expression: CONSTANT .

    $default  reduce using rule 3 (primary_expression)


State 3

    4 primary_expression: STRING_LITERAL .

    $default  reduce using rule 4 (primary_expression)


State 4

   12 unary_expression: INC_OP . unary_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression  go to state 7
    postfix_expression  go to state 8
    unary_expression    go to state 20


State 5

   13 unary_expression: DEC_OP . unary_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression  go to state 7
    postfix_expression  go to state 8
    unary_expression    go to state 21


State 6

    0 $accept: ROOT . $end

    $end  shift, and go to state 22


State 7

    5 postfix_expression: primary_expression .

    $default  reduce using rule 5 (postfix_expression)


State 8

    6 postfix_expression: postfix_expression . '(' ')'
    7                   | postfix_expression . '.' IDENTIFIER
    8                   | postfix_expression . PTR_OP IDENTIFIER
    9                   | postfix_expression . INC_OP
   10                   | postfix_expression . DEC_OP
   11 unary_expression: postfix_expression .

    PTR_OP  shift, and go to state 23
    INC_OP  shift, and go to state 24
    DEC_OP  shift, and go to state 25
    '('     shift, and go to state 26
    '.'     shift, and go to state 27

    $default  reduce using rule 11 (unary_expression)


State 9

   14 multiplicative_expression: unary_expression .

    $default  reduce using rule 14 (multiplicative_expression)


State 10

   15 multiplicative_expression: multiplicative_expression . '*' unary_expression
   16                          | multiplicative_expression . '/' unary_expression
   17                          | multiplicative_expression . '%' unary_expression
   18 additive_expression: multiplicative_expression .

    '*'  shift, and go to state 28
    '/'  shift, and go to state 29
    '%'  shift, and go to state 30

    $default  reduce using rule 18 (additive_expression)


State 11

   19 additive_expression: additive_expression . '+' multiplicative_expression
   20                    | additive_expression . '-' multiplicative_expression
   21 shift_expression: additive_expression .

    '+'  shift, and go to state 31
    '-'  shift, and go to state 32

    $default  reduce using rule 21 (shift_expression)


State 12

   22 shift_expression: shift_expression . LEFT_OP additive_expression
   23                 | shift_expression . RIGHT_OP additive_expression
   24 relational_expression: shift_expression .

    LEFT_OP   shift, and go to state 33
    RIGHT_OP  shift, and go to state 34

    $default  reduce using rule 24 (relational_expression)


State 13

   25 relational_expression: relational_expression . '<' shift_expression
   26                      | relational_expression . '>' shift_expression
   27                      | relational_expression . LE_OP shift_expression
   28                      | relational_expression . GE_OP shift_expression
   29 equality_expression: relational_expression .

    LE_OP  shift, and go to state 35
    GE_OP  shift, and go to state 36
    '<'    shift, and go to state 37
    '>'    shift, and go to state 38

    $default  reduce using rule 29 (equality_expression)


State 14

   30 equality_expression: equality_expression . EQ_OP relational_expression
   31                    | equality_expression . NE_OP relational_expression
   32 and_expression: equality_expression .

    EQ_OP  shift, and go to state 39
    NE_OP  shift, and go to state 40

    $default  reduce using rule 32 (and_expression)


State 15

   33 and_expression: and_expression . '&' equality_expression
   34 eor_expression: and_expression .

    '&'  shift, and go to state 41

    $default  reduce using rule 34 (eor_expression)


State 16

   35 eor_expression: eor_expression . '^' and_expression
   36 or_expression: eor_expression .

    '^'  shift, and go to state 42

    $default  reduce using rule 36 (or_expression)


State 17

   37 or_expression: or_expression . '|' eor_expression
   38 logical_and_expression: or_expression .

    '|'  shift, and go to state 43

    $default  reduce using rule 38 (logical_and_expression)


State 18

   39 logical_and_expression: logical_and_expression . AND_OP or_expression
   40 logical_or_expression: logical_and_expression .

    AND_OP  shift, and go to state 44

    $default  reduce using rule 40 (logical_or_expression)


State 19

    1 ROOT: logical_or_expression .
   41 logical_or_expression: logical_or_expression . OR_OP logical_and_expression

    OR_OP  shift, and go to state 45

    $default  reduce using rule 1 (ROOT)


State 20

   12 unary_expression: INC_OP unary_expression .

    $default  reduce using rule 12 (unary_expression)


State 21

   13 unary_expression: DEC_OP unary_expression .

    $default  reduce using rule 13 (unary_expression)


State 22

    0 $accept: ROOT $end .

    $default  accept


State 23

    8 postfix_expression: postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 46


State 24

    9 postfix_expression: postfix_expression INC_OP .

    $default  reduce using rule 9 (postfix_expression)


State 25

   10 postfix_expression: postfix_expression DEC_OP .

    $default  reduce using rule 10 (postfix_expression)


State 26

    6 postfix_expression: postfix_expression '(' . ')'

    ')'  shift, and go to state 47


State 27

    7 postfix_expression: postfix_expression '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 48


State 28

   15 multiplicative_expression: multiplicative_expression '*' . unary_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression  go to state 7
    postfix_expression  go to state 8
    unary_expression    go to state 49


State 29

   16 multiplicative_expression: multiplicative_expression '/' . unary_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression  go to state 7
    postfix_expression  go to state 8
    unary_expression    go to state 50


State 30

   17 multiplicative_expression: multiplicative_expression '%' . unary_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression  go to state 7
    postfix_expression  go to state 8
    unary_expression    go to state 51


State 31

   19 additive_expression: additive_expression '+' . multiplicative_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 52


State 32

   20 additive_expression: additive_expression '-' . multiplicative_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 53


State 33

   22 shift_expression: shift_expression LEFT_OP . additive_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 54


State 34

   23 shift_expression: shift_expression RIGHT_OP . additive_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 55


State 35

   27 relational_expression: relational_expression LE_OP . shift_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 56


State 36

   28 relational_expression: relational_expression GE_OP . shift_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 57


State 37

   25 relational_expression: relational_expression '<' . shift_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 58


State 38

   26 relational_expression: relational_expression '>' . shift_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 59


State 39

   30 equality_expression: equality_expression EQ_OP . relational_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 12
    relational_expression      go to state 60


State 40

   31 equality_expression: equality_expression NE_OP . relational_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 12
    relational_expression      go to state 61


State 41

   33 and_expression: and_expression '&' . equality_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 12
    relational_expression      go to state 13
    equality_expression        go to state 62


State 42

   35 eor_expression: eor_expression '^' . and_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 12
    relational_expression      go to state 13
    equality_expression        go to state 14
    and_expression             go to state 63


State 43

   37 or_expression: or_expression '|' . eor_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 12
    relational_expression      go to state 13
    equality_expression        go to state 14
    and_expression             go to state 15
    eor_expression             go to state 64


State 44

   39 logical_and_expression: logical_and_expression AND_OP . or_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 12
    relational_expression      go to state 13
    equality_expression        go to state 14
    and_expression             go to state 15
    eor_expression             go to state 16
    or_expression              go to state 65


State 45

   41 logical_or_expression: logical_or_expression OR_OP . logical_and_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression         go to state 7
    postfix_expression         go to state 8
    unary_expression           go to state 9
    multiplicative_expression  go to state 10
    additive_expression        go to state 11
    shift_expression           go to state 12
    relational_expression      go to state 13
    equality_expression        go to state 14
    and_expression             go to state 15
    eor_expression             go to state 16
    or_expression              go to state 17
    logical_and_expression     go to state 66


State 46

    8 postfix_expression: postfix_expression PTR_OP IDENTIFIER .

    $default  reduce using rule 8 (postfix_expression)


State 47

    6 postfix_expression: postfix_expression '(' ')' .

    $default  reduce using rule 6 (postfix_expression)


State 48

    7 postfix_expression: postfix_expression '.' IDENTIFIER .

    $default  reduce using rule 7 (postfix_expression)


State 49

   15 multiplicative_expression: multiplicative_expression '*' unary_expression .

    $default  reduce using rule 15 (multiplicative_expression)


State 50

   16 multiplicative_expression: multiplicative_expression '/' unary_expression .

    $default  reduce using rule 16 (multiplicative_expression)


State 51

   17 multiplicative_expression: multiplicative_expression '%' unary_expression .

    $default  reduce using rule 17 (multiplicative_expression)


State 52

   15 multiplicative_expression: multiplicative_expression . '*' unary_expression
   16                          | multiplicative_expression . '/' unary_expression
   17                          | multiplicative_expression . '%' unary_expression
   19 additive_expression: additive_expression '+' multiplicative_expression .

    '*'  shift, and go to state 28
    '/'  shift, and go to state 29
    '%'  shift, and go to state 30

    $default  reduce using rule 19 (additive_expression)


State 53

   15 multiplicative_expression: multiplicative_expression . '*' unary_expression
   16                          | multiplicative_expression . '/' unary_expression
   17                          | multiplicative_expression . '%' unary_expression
   20 additive_expression: additive_expression '-' multiplicative_expression .

    '*'  shift, and go to state 28
    '/'  shift, and go to state 29
    '%'  shift, and go to state 30

    $default  reduce using rule 20 (additive_expression)


State 54

   19 additive_expression: additive_expression . '+' multiplicative_expression
   20                    | additive_expression . '-' multiplicative_expression
   22 shift_expression: shift_expression LEFT_OP additive_expression .

    '+'  shift, and go to state 31
    '-'  shift, and go to state 32

    $default  reduce using rule 22 (shift_expression)


State 55

   19 additive_expression: additive_expression . '+' multiplicative_expression
   20                    | additive_expression . '-' multiplicative_expression
   23 shift_expression: shift_expression RIGHT_OP additive_expression .

    '+'  shift, and go to state 31
    '-'  shift, and go to state 32

    $default  reduce using rule 23 (shift_expression)


State 56

   22 shift_expression: shift_expression . LEFT_OP additive_expression
   23                 | shift_expression . RIGHT_OP additive_expression
   27 relational_expression: relational_expression LE_OP shift_expression .

    LEFT_OP   shift, and go to state 33
    RIGHT_OP  shift, and go to state 34

    $default  reduce using rule 27 (relational_expression)


State 57

   22 shift_expression: shift_expression . LEFT_OP additive_expression
   23                 | shift_expression . RIGHT_OP additive_expression
   28 relational_expression: relational_expression GE_OP shift_expression .

    LEFT_OP   shift, and go to state 33
    RIGHT_OP  shift, and go to state 34

    $default  reduce using rule 28 (relational_expression)


State 58

   22 shift_expression: shift_expression . LEFT_OP additive_expression
   23                 | shift_expression . RIGHT_OP additive_expression
   25 relational_expression: relational_expression '<' shift_expression .

    LEFT_OP   shift, and go to state 33
    RIGHT_OP  shift, and go to state 34

    $default  reduce using rule 25 (relational_expression)


State 59

   22 shift_expression: shift_expression . LEFT_OP additive_expression
   23                 | shift_expression . RIGHT_OP additive_expression
   26 relational_expression: relational_expression '>' shift_expression .

    LEFT_OP   shift, and go to state 33
    RIGHT_OP  shift, and go to state 34

    $default  reduce using rule 26 (relational_expression)


State 60

   25 relational_expression: relational_expression . '<' shift_expression
   26                      | relational_expression . '>' shift_expression
   27                      | relational_expression . LE_OP shift_expression
   28                      | relational_expression . GE_OP shift_expression
   30 equality_expression: equality_expression EQ_OP relational_expression .

    LE_OP  shift, and go to state 35
    GE_OP  shift, and go to state 36
    '<'    shift, and go to state 37
    '>'    shift, and go to state 38

    $default  reduce using rule 30 (equality_expression)


State 61

   25 relational_expression: relational_expression . '<' shift_expression
   26                      | relational_expression . '>' shift_expression
   27                      | relational_expression . LE_OP shift_expression
   28                      | relational_expression . GE_OP shift_expression
   31 equality_expression: equality_expression NE_OP relational_expression .

    LE_OP  shift, and go to state 35
    GE_OP  shift, and go to state 36
    '<'    shift, and go to state 37
    '>'    shift, and go to state 38

    $default  reduce using rule 31 (equality_expression)


State 62

   30 equality_expression: equality_expression . EQ_OP relational_expression
   31                    | equality_expression . NE_OP relational_expression
   33 and_expression: and_expression '&' equality_expression .

    EQ_OP  shift, and go to state 39
    NE_OP  shift, and go to state 40

    $default  reduce using rule 33 (and_expression)


State 63

   33 and_expression: and_expression . '&' equality_expression
   35 eor_expression: eor_expression '^' and_expression .

    '&'  shift, and go to state 41

    $default  reduce using rule 35 (eor_expression)


State 64

   35 eor_expression: eor_expression . '^' and_expression
   37 or_expression: or_expression '|' eor_expression .

    '^'  shift, and go to state 42

    $default  reduce using rule 37 (or_expression)


State 65

   37 or_expression: or_expression . '|' eor_expression
   39 logical_and_expression: logical_and_expression AND_OP or_expression .

    '|'  shift, and go to state 43

    $default  reduce using rule 39 (logical_and_expression)


State 66

   39 logical_and_expression: logical_and_expression . AND_OP or_expression
   41 logical_or_expression: logical_or_expression OR_OP logical_and_expression .

    AND_OP  shift, and go to state 44

    $default  reduce using rule 41 (logical_or_expression)
