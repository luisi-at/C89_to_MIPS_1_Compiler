Terminals unused in grammar

   SIZEOF
   LEFT_OP
   RIGHT_OP
   LE_OP
   GE_OP
   EQ_OP
   NE_OP
   AND_OP
   OR_OP
   MUL_ASSIGN
   DIV_ASSIGN
   MOD_ASSIGN
   ADD_ASSIGN
   SUB_ASSIGN
   LEFT_ASSIGN
   RIGHT_ASSIGN
   AND_ASSIGN
   XOR_ASSIGN
   OR_ASSIGN
   TYPEDEF
   EXTERN
   STATIC
   AUTO
   REGISTER
   CHAR
   SHORT
   INT
   LONG
   SIGNED
   UNSIGNED
   FLOAT
   DOUBLE
   CONST
   VOLATILE
   VOID
   STRUCT
   UNION
   ENUM
   ELLIPSIS
   CASE
   DEFAULT
   IF
   ELSE
   SWITCH
   WHILE
   DO
   FOR
   GOTO
   CONTINUE
   BREAK
   RETURN


Grammar

    0 $accept: ROOT $end

    1 ROOT: unary_expression

    2 primary_expression: IDENTIFIER
    3                   | CONSTANT
    4                   | STRING_LITERAL

    5 postfix_expression: primary_expression
    6                   | postfix_expression '(' ')'
    7                   | postfix_expression '.' IDENTIFIER
    8                   | postfix_expression PTR_OP IDENTIFIER
    9                   | postfix_expression INC_OP
   10                   | postfix_expression DEC_OP

   11 unary_expression: postfix_expression
   12                 | INC_OP unary_expression
   13                 | DEC_OP unary_expression


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6
')' (41) 6
'.' (46) 7
error (256)
IDENTIFIER (258) 2 7 8
CONSTANT (259) 3
STRING_LITERAL (260) 4
SIZEOF (261)
PTR_OP (262) 8
INC_OP (263) 9 12
DEC_OP (264) 10 13
LEFT_OP (265)
RIGHT_OP (266)
LE_OP (267)
GE_OP (268)
EQ_OP (269)
NE_OP (270)
AND_OP (271)
OR_OP (272)
MUL_ASSIGN (273)
DIV_ASSIGN (274)
MOD_ASSIGN (275)
ADD_ASSIGN (276)
SUB_ASSIGN (277)
LEFT_ASSIGN (278)
RIGHT_ASSIGN (279)
AND_ASSIGN (280)
XOR_ASSIGN (281)
OR_ASSIGN (282)
TYPEDEF (283)
EXTERN (284)
STATIC (285)
AUTO (286)
REGISTER (287)
CHAR (288)
SHORT (289)
INT (290)
LONG (291)
SIGNED (292)
UNSIGNED (293)
FLOAT (294)
DOUBLE (295)
CONST (296)
VOLATILE (297)
VOID (298)
STRUCT (299)
UNION (300)
ENUM (301)
ELLIPSIS (302)
CASE (303)
DEFAULT (304)
IF (305)
ELSE (306)
SWITCH (307)
WHILE (308)
DO (309)
FOR (310)
GOTO (311)
CONTINUE (312)
BREAK (313)
RETURN (314)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
ROOT (64)
    on left: 1, on right: 0
primary_expression (65)
    on left: 2 3 4, on right: 5
postfix_expression (66)
    on left: 5 6 7 8 9 10, on right: 6 7 8 9 10 11
unary_expression (67)
    on left: 11 12 13, on right: 1 12 13


State 0

    0 $accept: . ROOT $end

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    ROOT                go to state 6
    primary_expression  go to state 7
    postfix_expression  go to state 8
    unary_expression    go to state 9


State 1

    2 primary_expression: IDENTIFIER .

    $default  reduce using rule 2 (primary_expression)


State 2

    3 primary_expression: CONSTANT .

    $default  reduce using rule 3 (primary_expression)


State 3

    4 primary_expression: STRING_LITERAL .

    $default  reduce using rule 4 (primary_expression)


State 4

   12 unary_expression: INC_OP . unary_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression  go to state 7
    postfix_expression  go to state 8
    unary_expression    go to state 10


State 5

   13 unary_expression: DEC_OP . unary_expression

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    INC_OP          shift, and go to state 4
    DEC_OP          shift, and go to state 5

    primary_expression  go to state 7
    postfix_expression  go to state 8
    unary_expression    go to state 11


State 6

    0 $accept: ROOT . $end

    $end  shift, and go to state 12


State 7

    5 postfix_expression: primary_expression .

    $default  reduce using rule 5 (postfix_expression)


State 8

    6 postfix_expression: postfix_expression . '(' ')'
    7                   | postfix_expression . '.' IDENTIFIER
    8                   | postfix_expression . PTR_OP IDENTIFIER
    9                   | postfix_expression . INC_OP
   10                   | postfix_expression . DEC_OP
   11 unary_expression: postfix_expression .

    PTR_OP  shift, and go to state 13
    INC_OP  shift, and go to state 14
    DEC_OP  shift, and go to state 15
    '('     shift, and go to state 16
    '.'     shift, and go to state 17

    $default  reduce using rule 11 (unary_expression)


State 9

    1 ROOT: unary_expression .

    $default  reduce using rule 1 (ROOT)


State 10

   12 unary_expression: INC_OP unary_expression .

    $default  reduce using rule 12 (unary_expression)


State 11

   13 unary_expression: DEC_OP unary_expression .

    $default  reduce using rule 13 (unary_expression)


State 12

    0 $accept: ROOT $end .

    $default  accept


State 13

    8 postfix_expression: postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 18


State 14

    9 postfix_expression: postfix_expression INC_OP .

    $default  reduce using rule 9 (postfix_expression)


State 15

   10 postfix_expression: postfix_expression DEC_OP .

    $default  reduce using rule 10 (postfix_expression)


State 16

    6 postfix_expression: postfix_expression '(' . ')'

    ')'  shift, and go to state 19


State 17

    7 postfix_expression: postfix_expression '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 20


State 18

    8 postfix_expression: postfix_expression PTR_OP IDENTIFIER .

    $default  reduce using rule 8 (postfix_expression)


State 19

    6 postfix_expression: postfix_expression '(' ')' .

    $default  reduce using rule 6 (postfix_expression)


State 20

    7 postfix_expression: postfix_expression '.' IDENTIFIER .

    $default  reduce using rule 7 (postfix_expression)
