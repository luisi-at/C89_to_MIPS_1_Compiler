#line 2 "src/c_lexer.yy.cpp"

#line 4 "src/c_lexer.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 91
#define YY_END_OF_BUFFER 92
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[245] =
    {   0,
        0,    0,   92,   90,    1,   89,   84,   90,   90,   77,
       83,   90,   70,   71,   74,   72,   79,   73,   78,   75,
        3,    3,   80,   81,   64,   76,   65,   87,   42,   42,
       68,   90,   69,   86,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   66,
       85,   67,   82,   58,    0,    8,    0,    0,   49,   59,
       50,    0,   47,   43,   45,   44,   46,   63,    0,    6,
       48,    6,    3,    3,    0,    0,    3,    3,    5,   61,
       55,   57,   56,   62,   42,   42,    0,    0,    9,    9,
        9,   52,   42,   42,   42,   42,   42,   42,   38,   42,

       42,   42,   42,   42,   42,   39,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   51,   60,    0,
        7,   88,    0,    6,    5,    0,    6,    4,   53,   54,
       42,    0,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   31,   42,   12,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,    0,    0,    6,    6,    5,   10,   42,   18,   22,
       42,   42,   42,   42,   15,   19,   42,   42,   35,   16,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   33,   42,   42,    0,   14,   26,   42,   42,   42,

       42,   27,   42,   42,   28,   42,   42,   42,   42,   42,
       42,   25,   42,   42,   41,    0,    2,   42,   42,   11,
       23,   42,   24,   32,   36,   40,   13,   17,   42,   42,
       42,    0,   42,   34,   42,   21,   42,   42,    2,   30,
       20,   29,   37,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   28,   28,   28,   29,   30,
       31,   31,   31,   31,   31,   32,   31,   31,   31,   31,
       31,   31,   31,   31,   33,   31,   31,   34,   31,   31,
       35,   36,   37,   38,   31,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   31,   48,   49,   50,   51,
       52,   53,   31,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    4,    4,
        4,    1,    1,    1,    1,    1,    1,    4,    4,    4,
        5,    5,    5,    5,    1,    3,    1,    1,    4,    4,
        4,    4,    4,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[253] =
    {   0,
        0,    0,  193,  948,  948,  948,  163,   61,  183,  149,
       59,    0,  948,  948,  148,   55,  948,   56,   54,  139,
       66,  110,  948,  948,   52,  129,   53,  948,   69,   86,
      948,  162,  948,  127,   83,   91,   95,  103,  100,  117,
      142,  156,  159,  165,  176,  137,  205,  208,  217,  948,
       68,  948,  948,  948,   92,  948,    0,  220,  948,  948,
      948,  140,  948,  948,  948,  948,  948,  948,  131,  223,
      948,  249,  282,  228,  266,    0,   97,    0,  948,  119,
      948,  948,  948,  108,  254,  269,  129,    0,  948,  151,
        0,  948,  276,  285,  288,  297,  300,  303,  314,  321,

      325,  329,  334,  337,  340,  343,  346,  349,  353,  358,
      368,  373,  384,  387,  395,  398,  401,  948,  948,  432,
      948,  948,  418,  948,  948,  404,  435,  201,  948,  948,
      438,  115,  441,  449,  452,  455,  466,  471,  477,  480,
      483,  486,  492,  495,  499,  505,  515,  518,  521,  525,
      529,  533,  536,  542,  547,  550,  553,  562,  565,  569,
      575,  107,  581,  591,  948,  948,  594,  597,  606,  609,
      612,  617,  622,  627,  630,  633,  636,  639,  642,  646,
      650,  653,  661,  665,  668,  672,  677,  680,  683,  690,
      693,  703,  707,  710,  102,  713,  716,  723,  726,  729,

      735,  738,  741,  745,  748,  757,  760,  764,  768,  771,
      782,  774,  787,  790,  793,   88,   95,  799,  802,  807,
      810,  814,  820,  823,  826,  829,  832,  840,  843,  846,
      849,  865,  853,  856,  859,  862,  872,  880,  884,  887,
      890,  896,  899,  948,  923,  928,  930,   87,  932,  937,
       66,  942
    } ;

static yyconst flex_int16_t yy_def[253] =
    {   0,
      244,    1,  244,  244,  244,  244,  244,  245,  244,  244,
      244,  246,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  247,  247,
      244,  244,  244,  244,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  244,
      244,  244,  244,  244,  245,  244,  245,  244,  244,  244,
      244,  246,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  248,   22,   22,  244,  244,
      244,  244,  244,  244,  249,  247,  245,  250,  244,  251,
      251,  244,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  248,  244,  244,
      249,  250,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  244,  244,  244,  244,  244,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  252,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  252,  252,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  252,  247,  247,  247,  247,  247,  247,  252,  247,
      247,  247,  247,    0,  244,  244,  244,  244,  244,  244,
      244,  244
    } ;

static yyconst flex_uint16_t yy_nxt[1015] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   23,   24,   25,   26,   27,   28,   29,   29,   29,
       29,   30,   29,   29,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   29,   42,   29,   43,   29,
       29,   29,   29,   44,   45,   46,   47,   48,   49,   29,
       29,   29,   50,   51,   52,   53,   56,   60,   64,   91,
       69,   66,   70,   70,   70,   80,   81,   83,   84,   65,
       67,   68,   72,   61,   73,   73,   74,   85,   85,   85,
      128,   87,  118,  217,   75,   88,   57,   56,  232,   76,

      217,   85,   85,   85,   85,   85,   85,  217,   75,   85,
       85,   85,  195,   85,   85,   85,   77,   77,   85,   85,
       85,   85,   85,   85,  121,   76,   72,   57,   77,   78,
       78,  119,  130,   95,   56,   85,   85,   85,   75,   93,
       96,   79,   79,  129,   94,   98,   97,  122,  100,  121,
      101,   92,   75,   82,   99,   85,   85,   85,   79,  102,
       85,   85,   85,   71,   57,  103,   79,   89,  104,   90,
       90,   89,   63,   59,   85,   85,   85,   85,   85,   85,
       90,   90,   91,   85,   85,   85,   58,   54,   89,   91,
       91,   91,  244,  105,   85,   85,   85,  114,  244,  106,

       91,   91,   91,   91,   91,   91,  107,  109,  244,  244,
      108,  244,   89,  244,  244,   89,  244,   89,  244,   89,
      244,  110,  111,   85,   85,   85,   85,   85,   85,  244,
      244,  112,  166,  166,  113,   85,   85,   85,  120,  120,
      120,   70,   70,   70,   72,  244,   74,   74,   74,  166,
      244,  123,  124,  244,  124,  115,   75,  166,  244,  116,
      244,  244,  117,  244,  244,  123,  124,   70,   70,   70,
       75,  124,   85,   85,   85,  244,  244,  123,  124,  126,
      124,  126,  244,  244,  127,  127,  127,   85,   85,   85,
      244,  123,  124,  244,   85,   85,   85,  124,   72,  244,

       73,   73,   74,   85,   85,   85,   85,   85,   85,  244,
       75,  244,  244,  125,  125,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   75,  244,  244,  134,  244,  126,
      125,  133,   85,   85,   85,  136,  244,  244,  125,   85,
       85,   85,  135,   85,   85,   85,  138,   85,   85,   85,
      137,  244,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
      139,   85,   85,   85,  244,  140,   85,   85,   85,  244,
      244,  141,  244,  244,  142,  143,   85,   85,   85,  244,
      144,   85,   85,   85,  244,  145,  244,  148,  244,  147,

      244,  146,   85,   85,   85,   85,   85,   85,  149,  150,
      244,  153,  151,   85,   85,   85,   85,   85,   85,   85,
       85,   85,  127,  127,  127,  244,  154,  244,  244,  152,
      155,  163,  244,  163,  244,  162,  164,  164,  164,  156,
      244,  157,  244,  244,  159,  244,  160,  161,  244,  158,
      120,  120,  120,  127,  127,  127,   85,   85,   85,   85,
       85,   85,  244,  244,  165,  244,  165,   85,   85,   85,
       85,   85,   85,   85,   85,   85,  244,  244,  165,  244,
      244,  163,  244,  165,   85,   85,   85,  168,  244,   85,
       85,   85,  167,  244,  169,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,  244,  170,  173,
       85,   85,   85,   85,   85,   85,  174,   85,   85,   85,
      171,  172,  175,   85,   85,   85,  244,  244,  177,  244,
      178,  244,  176,   85,   85,   85,   85,   85,   85,   85,
       85,   85,  244,   85,   85,   85,  244,   85,   85,   85,
      179,   85,   85,   85,   85,   85,   85,  244,  244,  180,
       85,   85,   85,  244,  181,   85,   85,   85,   85,   85,
       85,   85,   85,   85,  244,  185,  244,  182,  183,  184,
       85,   85,   85,   85,   85,   85,  244,   85,   85,   85,
      244,  186,  189,   85,   85,   85,  244,  244,  187,  164,

      164,  164,  188,  244,  190,  244,  192,  193,  191,  164,
      164,  164,   85,   85,   85,   85,   85,   85,  244,  244,
      124,  244,  124,  194,   85,   85,   85,   85,   85,   85,
       85,   85,   85,  244,  124,   85,   85,   85,  244,  124,
       85,   85,   85,  244,  196,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,  198,   85,   85,   85,  197,   85,   85,
       85,   85,   85,   85,  244,  200,  244,  244,  199,   85,
       85,   85,  244,   85,   85,   85,   85,   85,   85,  201,
       85,   85,   85,  244,  202,   85,   85,   85,   85,   85,

       85,   85,   85,   85,  203,  244,  204,  206,   85,   85,
       85,   85,   85,   85,  244,  244,  205,  209,  208,  207,
      210,   85,   85,   85,  211,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  213,  244,  244,
      212,   85,   85,   85,   85,   85,   85,   85,   85,   85,
      244,  244,  215,   85,   85,   85,   85,   85,   85,   85,
       85,   85,  214,   85,   85,   85,   85,   85,   85,  244,
      244,  220,  244,  218,  219,   85,   85,   85,   85,   85,
       85,  244,   85,   85,   85,  221,   85,   85,   85,   85,
       85,   85,   85,   85,   85,  223,  222,  244,  224,  244,

       85,   85,   85,  225,  226,   85,   85,   85,   85,   85,
       85,   85,   85,   85,  244,  244,  228,   85,   85,   85,
       85,   85,   85,  227,  229,   85,   85,   85,   85,   85,
       85,  244,   85,   85,   85,  244,  231,  230,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,  244,  244,  233,  235,  234,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
      217,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,  239,  239,  239,  236,  232,  237,  217,
       85,   85,   85,  244,  244,  240,  244,  238,   85,   85,

       85,  244,  239,  239,  239,   85,   85,   85,   85,   85,
       85,  244,  241,  242,   85,   85,   85,   85,   85,   85,
      244,  244,  243,   55,  244,   55,   55,   55,   62,  244,
      244,   62,   62,   86,   86,  131,  131,  132,  244,  244,
      132,  132,  216,  244,  216,  216,  216,    3,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244
    } ;

static yyconst flex_int16_t yy_chk[1015] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    8,   11,   16,  251,
       19,   18,   19,   19,   19,   25,   25,   27,   27,   16,
       18,   18,   21,   11,   21,   21,   21,   29,   29,   29,
      248,   30,   51,  216,   21,   30,    8,   55,  217,   21,

      217,   35,   35,   35,   30,   30,   30,  195,   21,   36,
       36,   36,  162,   37,   37,   37,   77,   77,   39,   39,
       39,   38,   38,   38,  132,   21,   22,   55,   22,   22,
       22,   51,   84,   37,   87,   40,   40,   40,   22,   35,
       37,   22,   22,   80,   36,   38,   37,   69,   39,   62,
       39,   34,   22,   26,   38,   46,   46,   46,   22,   39,
       41,   41,   41,   20,   87,   40,   22,   32,   40,   90,
       90,   32,   15,   10,   42,   42,   42,   43,   43,   43,
       32,   32,   32,   44,   44,   44,    9,    7,   32,   32,
       32,   32,    3,   41,   45,   45,   45,   46,    0,   42,

       32,   32,   32,   32,   32,   32,   42,   44,    0,    0,
       43,    0,   32,    0,    0,   32,    0,   32,    0,   32,
        0,   45,   45,   47,   47,   47,   48,   48,   48,    0,
        0,   45,  128,  128,   45,   49,   49,   49,   58,   58,
       58,   70,   70,   70,   74,    0,   74,   74,   74,  128,
        0,   70,   70,    0,   70,   47,   74,  128,    0,   48,
        0,    0,   49,    0,    0,   70,   70,   72,   72,   72,
       74,   70,   85,   85,   85,    0,    0,   72,   72,   75,
       72,   75,    0,    0,   75,   75,   75,   86,   86,   86,
        0,   72,   72,    0,   93,   93,   93,   72,   73,    0,

       73,   73,   73,   94,   94,   94,   95,   95,   95,    0,
       73,    0,    0,   73,   73,   96,   96,   96,   97,   97,
       97,   98,   98,   98,   73,    0,    0,   94,    0,   75,
       73,   93,   99,   99,   99,   96,    0,    0,   73,  100,
      100,  100,   95,  101,  101,  101,   98,  102,  102,  102,
       97,    0,  103,  103,  103,  104,  104,  104,  105,  105,
      105,  106,  106,  106,  107,  107,  107,  108,  108,  108,
       99,  109,  109,  109,    0,  100,  110,  110,  110,    0,
        0,  101,    0,    0,  102,  103,  111,  111,  111,    0,
      104,  112,  112,  112,    0,  105,    0,  109,    0,  108,

        0,  107,  113,  113,  113,  114,  114,  114,  109,  110,
        0,  112,  111,  115,  115,  115,  116,  116,  116,  117,
      117,  117,  126,  126,  126,    0,  112,    0,    0,  111,
      113,  123,    0,  123,    0,  120,  123,  123,  123,  114,
        0,  115,    0,    0,  116,    0,  116,  117,    0,  115,
      120,  120,  120,  127,  127,  127,  131,  131,  131,  133,
      133,  133,    0,    0,  127,    0,  127,  134,  134,  134,
      135,  135,  135,  136,  136,  136,    0,    0,  127,    0,
        0,  123,    0,  127,  137,  137,  137,  134,    0,  138,
      138,  138,  133,    0,  135,  139,  139,  139,  140,  140,

      140,  141,  141,  141,  142,  142,  142,    0,  136,  138,
      143,  143,  143,  144,  144,  144,  139,  145,  145,  145,
      137,  137,  140,  146,  146,  146,    0,    0,  142,    0,
      143,    0,  141,  147,  147,  147,  148,  148,  148,  149,
      149,  149,    0,  150,  150,  150,    0,  151,  151,  151,
      145,  152,  152,  152,  153,  153,  153,    0,    0,  147,
      154,  154,  154,    0,  148,  155,  155,  155,  156,  156,
      156,  157,  157,  157,    0,  152,    0,  149,  150,  151,
      158,  158,  158,  159,  159,  159,    0,  160,  160,  160,
        0,  153,  156,  161,  161,  161,    0,    0,  154,  163,

      163,  163,  155,    0,  157,    0,  159,  160,  158,  164,
      164,  164,  167,  167,  167,  168,  168,  168,    0,    0,
      164,    0,  164,  161,  169,  169,  169,  170,  170,  170,
      171,  171,  171,    0,  164,  172,  172,  172,    0,  164,
      173,  173,  173,    0,  168,  174,  174,  174,  175,  175,
      175,  176,  176,  176,  177,  177,  177,  178,  178,  178,
      179,  179,  179,  172,  180,  180,  180,  171,  181,  181,
      181,  182,  182,  182,    0,  174,    0,    0,  173,  183,
      183,  183,    0,  184,  184,  184,  185,  185,  185,  177,
      186,  186,  186,    0,  178,  187,  187,  187,  188,  188,

      188,  189,  189,  189,  181,    0,  182,  184,  190,  190,
      190,  191,  191,  191,    0,    0,  183,  187,  186,  185,
      188,  192,  192,  192,  189,  193,  193,  193,  194,  194,
      194,  196,  196,  196,  197,  197,  197,  191,    0,    0,
      190,  198,  198,  198,  199,  199,  199,  200,  200,  200,
        0,    0,  194,  201,  201,  201,  202,  202,  202,  203,
      203,  203,  193,  204,  204,  204,  205,  205,  205,    0,
        0,  200,    0,  198,  199,  206,  206,  206,  207,  207,
      207,    0,  208,  208,  208,  201,  209,  209,  209,  210,
      210,  210,  212,  212,  212,  204,  203,    0,  206,    0,

      211,  211,  211,  207,  208,  213,  213,  213,  214,  214,
      214,  215,  215,  215,    0,    0,  210,  218,  218,  218,
      219,  219,  219,  209,  211,  220,  220,  220,  221,  221,
      221,    0,  222,  222,  222,    0,  214,  213,  223,  223,
      223,  224,  224,  224,  225,  225,  225,  226,  226,  226,
      227,  227,  227,    0,    0,  218,  222,  219,  228,  228,
      228,  229,  229,  229,  230,  230,  230,  231,  231,  231,
      232,  233,  233,  233,  234,  234,  234,  235,  235,  235,
      236,  236,  236,  232,  232,  232,  229,  239,  230,  239,
      237,  237,  237,    0,    0,  233,    0,  231,  238,  238,

      238,    0,  239,  239,  239,  240,  240,  240,  241,  241,
      241,    0,  235,  237,  242,  242,  242,  243,  243,  243,
        0,    0,  238,  245,    0,  245,  245,  245,  246,    0,
        0,  246,  246,  247,  247,  249,  249,  250,    0,    0,
      250,  250,  252,    0,  252,  252,  252,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[92] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/c_lexer.flex"
#line 6 "src/c_lexer.flex"
/* C embedded into autogenerated code goes here,
need to include any header files that may be needed */

extern "C" int fileno(FILE *stream);

//#include "c_lexer.hpp"
#include "c_parser.tab.hpp"

/* Definitions as defined by the C89/C90 Specification */
/* s_char_sequence essentially takes the c_char sequence but bundles it within quotation marks */
/* this may need further investigation */
/* are there more ^^? */
#line 818 "src/c_lexer.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 67 "src/c_lexer.flex"


#line 1039 "src/c_lexer.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 245 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 948 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 69 "src/c_lexer.flex"
{ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 71 "src/c_lexer.flex"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "src/c_lexer.flex"
{yylval.string_value = new std::string(yytext); return CONSTANT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return CONSTANT; } //return constant and the value
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 77 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return CONSTANT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 79 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return CONSTANT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 81 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return CONSTANT; } //return constant and value
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return(STRING_LITERAL); } //return constant and value
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 85 "src/c_lexer.flex"
{ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 88 "src/c_lexer.flex"
{ return AUTO; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 89 "src/c_lexer.flex"
{ return DOUBLE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 90 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return(INT); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 91 "src/c_lexer.flex"
{ return STRUCT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 92 "src/c_lexer.flex"
{ return BREAK; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 93 "src/c_lexer.flex"
{ return ELSE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 94 "src/c_lexer.flex"
{ return LONG; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 95 "src/c_lexer.flex"
{ return SWITCH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 96 "src/c_lexer.flex"
{ return CASE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 97 "src/c_lexer.flex"
{ return ENUM; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 98 "src/c_lexer.flex"
{ return REGISTER; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 99 "src/c_lexer.flex"
{ return TYPEDEF; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 100 "src/c_lexer.flex"
{ return CHAR; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 101 "src/c_lexer.flex"
{ return EXTERN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 102 "src/c_lexer.flex"
{ return RETURN; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 103 "src/c_lexer.flex"
{ return UNION; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 104 "src/c_lexer.flex"
{ return CONST; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 105 "src/c_lexer.flex"
{ return FLOAT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 106 "src/c_lexer.flex"
{ return SHORT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 107 "src/c_lexer.flex"
{ return UNSIGNED; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 108 "src/c_lexer.flex"
{ return CONTINUE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 109 "src/c_lexer.flex"
{ return FOR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 110 "src/c_lexer.flex"
{ return SIGNED; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 111 "src/c_lexer.flex"
{ return VOID; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 112 "src/c_lexer.flex"
{ return DEFAULT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 113 "src/c_lexer.flex"
{ return GOTO; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 114 "src/c_lexer.flex"
{ return SIZEOF; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 115 "src/c_lexer.flex"
{ return VOLATILE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 116 "src/c_lexer.flex"
{ return DO; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 117 "src/c_lexer.flex"
{ return IF; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 118 "src/c_lexer.flex"
{ return STATIC; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 119 "src/c_lexer.flex"
{ return(WHILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 121 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return(IDENTIFIER); } //return identifier
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 125 "src/c_lexer.flex"
{ return INC_OP; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 126 "src/c_lexer.flex"
{ return DEC_OP; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 127 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return ADD_ASSIGN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 128 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return SUB_ASSIGN; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 129 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return MUL_ASSIGN; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 130 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return DIV_ASSIGN; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 131 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return MOD_ASSIGN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 132 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return AND_ASSIGN; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 133 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return OR_ASSIGN; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 134 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return XOR_ASSIGN; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 135 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return LEFT_ASSIGN; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 136 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return RIGHT_ASSIGN; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 137 "src/c_lexer.flex"
{ return LE_OP; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 138 "src/c_lexer.flex"
{ return GE_OP; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 139 "src/c_lexer.flex"
{ return EQ_OP; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 140 "src/c_lexer.flex"
{ return NE_OP; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 141 "src/c_lexer.flex"
{ return AND_OP; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 142 "src/c_lexer.flex"
{ return OR_OP; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 143 "src/c_lexer.flex"
{ return LEFT_OP; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 144 "src/c_lexer.flex"
{ return RIGHT_OP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 145 "src/c_lexer.flex"
{ return PTR_OP; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 147 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return('<'); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 148 "src/c_lexer.flex"
{ return('>'); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 149 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return('{'); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 150 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return('}'); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 151 "src/c_lexer.flex"
{ return('['); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 152 "src/c_lexer.flex"
{ return(']'); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 153 "src/c_lexer.flex"
{ return('('); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 154 "src/c_lexer.flex"
{ return(')'); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 155 "src/c_lexer.flex"
{ return('+'); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 156 "src/c_lexer.flex"
{ return('-'); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 157 "src/c_lexer.flex"
{ return('*'); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 158 "src/c_lexer.flex"
{ return('/'); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 159 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return ASSIGN; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 160 "src/c_lexer.flex"
{ return('%'); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 161 "src/c_lexer.flex"
{ return('.'); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 162 "src/c_lexer.flex"
{ return(','); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 163 "src/c_lexer.flex"
{ return(':'); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 164 "src/c_lexer.flex"
{ yylval.string_value = new std::string(yytext); return(';'); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 165 "src/c_lexer.flex"
{ return('~'); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 166 "src/c_lexer.flex"
{ return('&'); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 167 "src/c_lexer.flex"
{ return('!'); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 168 "src/c_lexer.flex"
{ return('|'); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 169 "src/c_lexer.flex"
{ return('^'); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 170 "src/c_lexer.flex"
{ return('?'); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 173 "src/c_lexer.flex"
{ return ELLIPSIS; }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 177 "src/c_lexer.flex"
{  }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 179 "src/c_lexer.flex"
{  }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 180 "src/c_lexer.flex"
ECHO;
	YY_BREAK
#line 1562 "src/c_lexer.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 245 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 245 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 244);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 180 "src/c_lexer.flex"



/* Error handler. This will get called if none of the rules match. */
void yyerror (char const *s)
{
  fprintf (stderr, "Token Value: %s\n", yytext);
  fprintf (stderr, "Flex Error: %s\n", yytext); /* s is the text that wasn't matched */
  exit(1);
}

