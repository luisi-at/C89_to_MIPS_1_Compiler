compound_statement
  : '{' '}'                                   { $$ = new CompoundStatement( NULL, NULL ); }
  | '{' statement_list '}'                    { $$ = new CompoundStatement( $2, NULL ); }
  ;


statement_list
  : statement                 { $$ = new StatementList(); $$->statement_list->push_back( $1 );}
  | statement_list statement  { $1->statement_list->push_back( $2 ); }
  ;

expression_statement
  : ';'                 { $$ = new ExpressionStatement( NULL ); }
  | expression ';'      { $$ = new ExpressionStatement( $1 ); }
  ;

  labeled_statement
    : IDENTIFIER ':' statement                { $$ = new IdentifierStatement( $1, $3 ); }
    | CASE constant_expression ':' statement  { $$ = new CaseStatement( $2, $4 ); }
    | DEFAULT ':' statement                   { $$ = new DefaultStatement( $3 ); }
    ;



selection_statement
  : IF '(' expression ')' statement                 { $$ = new IfSelection( $3, $5 ); }
  | IF '(' expression ')' statement ELSE statement  { $$ = new IfElseSelection( $3, $5, $7 ); }
  | SWITCH '(' expression ')' statement             { $$ = new SwitchSelection( $3, $5 ); }
  ;

iteration_statement
  : WHILE '(' expression ')' statement                                          { $$ = new WhileIterations( $3, $5 ); }
  | DO statement WHILE '(' expression ')' ';'                                   { $$ = new DoWhileIteration( $2, $5 ); }
  | FOR '(' expression_statement expression_statement ')' statement             { $$ = new ForNoExprIteration( $3, $4, $6 ); }
  | FOR '(' expression_statement expression_statement expression ')' statement  { $$ = new ForExprIteration( $3, $5, $5, $7); }
  ;

jump_statement
  : GOTO IDENTIFIER         { $$ = new GotoStatement( $2 ); }
  | CONTINUE ';'            { $$ = new ContinueStatement( new StringLiteral("") ); }
  | BREAK ';'               { $$ = new BreakStatement( new StringLiteral("") ); }
  | RETURN ';'              { $$ = new ReturnStatement( new StringLiteral("") ); }
  | RETURN expression ';'   { $$ = new ReturnExprStatement( $2 ); }
