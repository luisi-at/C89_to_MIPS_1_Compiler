type_qualifier_list
  : type_qualifier                      { $$ = new TypeQualifierExpressionList(); $$->expression_list->push_back( $1 ); }
  | type_qualifier_list type_qualifier  { $1->expression_list->push_back( $2 ); }

  storage_class_specifier
    : TYPEDEF                 { $$ = new StorageClassSpecifierExpression( $1 ); }
    | EXTERN                  { $$ = new StorageClassSpecifierExpression( $1 ); }
    | STATIC                  { $$ = new StorageClassSpecifierExpression( $1 ); }
    | AUTO                    { $$ = new StorageClassSpecifierExpression( $1 ); }
    | REGISTER                { $$ = new StorageClassSpecifierExpression( $1 ); }
    ;

    struct_or_union
      : STRUCT              { $$ = new TypeSpecifierExpression( $1 ); }
      | UNION               { $$ = new TypeSpecifierExpression( $1 ); }
      ;

    struct_declaration_list
      : struct_declaration                          { $$ = new StructDeclaratorList(); $$->declaration_list->push_back( $1 ); }
      | struct_declaration_list struct_declaration  { $1->declaration_list->push_back( $2 ); }
      ;

    struct_declaration
      : specifier_qualifier_list struct_declarator_list { $$ = new StructDeclaration( $1, $2); }
      ;

    struct_qualifier_list
      : type_specifier specifier_qualifier_list       { $1->expression_list->push_back( $2 ); }
      | type_specifier                                { $$ = new TypeSpecifierExpression( $1 ); }
      | type_qualifier specifier_qualifier_list       { $1->expression_list->push_back( $2 ); }
      | type_qualifier                                { $$ = new TypeQualifierExpression( $1 ); }
      ;

    struct_declarator_list
      : struct_declarator                             { $$ = new StructDeclaratorList(); $$->declaration_list->push_back( $1 ); }
      | struct_declarator_list ',' struct_declarator  { $1->declaration_list->push_back( $3 ); }
      ;

    struct_declarator
      : declarator
      | ':' constant_expression             { $$ = new StructDeclarator( NULL, $2 ); }
      | declarator ':' constant_expression  { $$ = new StructDeclarator( $1, $3 ); }
      ;


    enum_specifier
      : ENUM '{' enumerator_list '}'              { $$ = new EnumSpecifier( NULL, $3 );}
      | ENUM IDENTIFIER '{' enumerator_list '}'   { $$ = new EnumSpecifier( $2, $4 ); }
      | ENUM IDENTIFIER                           { $$ = new EnumSpecifier( $2, NULL ); }
      ;

    enumerator_list
      : enumerator                                { $$ = new EnumList }
      | enumerator_list ',' enumerator            { $1->expression_list->push_back( $3 ); }
      ;

    enumerator
      : IDENTIFIER
      | IDENTIFIER '=' constant_expression        { $$ = new EnumExpression( $1, $ 3); }
      ;

    type_qualifier
      : CONST       { $$ = new TypeQualifierExpression( $1 ); }
      | VOLATILE    { $$ = new TypeQualifierExpression( $1 ); }
      ;
